/// specs.d.ek // or specs.d.ts // definition file for the current EKON file.
{
// If the global (root) structure is an object/map, ignore '{' (optional)

// single line comments only
// keyValues can be without quotes

// -- null
//'nullValue': null,  // Yeah! commas are finally optional

// -- strings

// Unquoted Strings are simple one word strings & have a few conditions:
//  1. No WhiteSpace characters
//  2. Only characters allowed will be '_' , '-', '@', '.' 
//  3. No "//" will be parsed as string. It will be parsed as comments
//  4. No Reserved words: 'true', 'false', 'null' will be parsed as string
//  5. If its a number, it will be parsed as a number & not as string 
// 'unquotedKey': 'forSimpleOneWordStrings',
// 'unquotedKey2': 'john_doe@gmail.com', // TIP: Prefer single-quotes for URLs ("'<URL>'")

// for full support of the above characters, use the following three forms
// 'doubleQuotes': "You can use 'single-quotes' inside", // prefer single-quotes though
// 'singleQuotes': 'You can use "double-quotes" inside',
//'multilineWithBacktickQuote': `
//This is
//a multiline
//string
//`,
//'single QuotedKey': 'Prefer single-quotes over double-quotes for keys',

// numbers
//'intNumber': 123,
//'floatingPointNumber': -0.12345,
//'positiveSignNumber': +12345.123,
//'hexadecimalNumber': 0xdecaf,
//'trailingDecimal': -0.123

// Arrays
//'arrays': [
//    "hello there",
//    123,
//    { 'key': "value" }, // commas are optional
//    [ "another array" ]
//],

// key-value maps/objects
//'objectMap': {
//    'world': 'No comma rules still apply inside',
//    'arr': [
//        "Hello",
//        "World"
//    ],
//    'anotherNumber': 123   // trailiing commas
//},

// JSON backwards compatibility
//"hello": {
//    "array": [
//        "hello"
//    ],
//    "numberVal": 123
//},
//"key": 123,
//"jsonObject": {
//    "key": "value"
//},

// Compressed form - yeah! unlike YAML, whitespace is insignificant in EKON files
// compare the minified JSON and EKON. EKON will be always smaller
//'stringVal':'h' ,'arrayVal':[1,2,3,4],'numVal':-0.1, 'obj':{'k':'v'},'multiline':"hi\nthere\n",
//"stringVal":"h","arrayVal":[1,2,3,4],"numVal":-0.1,"obj":{"k":"v"},"multiline":"hi\nthere\n",

} - // As said before. If root structure is an object/map, `{}` is optional.

// Root Array must require `[]` though
